import logging
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from database import Database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = "457081438"  # –í–∞—à chat_id

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ë–∞—Ä–Ω–∞—É–ª —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+7)
BARNAUL_TZ = timedelta(hours=7)


def get_barnaul_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (UTC+7)"""
    return datetime.utcnow() + BARNAUL_TZ


def format_barnaul_time(dt=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    if dt is None:
        dt = get_barnaul_time()
    return dt.strftime('%d.%m.%Y %H:%M')


def get_empty_keyboard():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏)"""
    return ReplyKeyboardMarkup([[]], resize_keyboard=True)


def get_main_keyboard(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = str(user_id) == ADMIN_CHAT_ID

    keyboard = [
        [KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
    ]

    if is_admin:
        keyboard.append([
            KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç"),
            KeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        ])

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_next_saturday():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—É–±–±–æ—Ç—É –≤ –ë–∞—Ä–Ω–∞—É–ª—å—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    today = get_barnaul_time()
    days_ahead = 5 - today.weekday()  # 5 - —Å—É–±–±–æ—Ç–∞
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –ø–æ–∑–∂–µ
        days_ahead += 7
    return today + timedelta(days=days_ahead)


def get_week_dates(start_date):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏ –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ—Å–ª–µ —Å—É–±–±–æ—Ç—ã"""
    dates = []
    monday = start_date + timedelta(days=2)
    for i in range(7):
        current_date = monday + timedelta(days=i)
        dates.append(current_date.strftime("%d.%m"))
    return dates


async def start_schedule_collection(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å—É–±–±–æ—Ç—É"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç –ü–í–ó
    all_pvz = db.get_all_pvz()

    for pvz in all_pvz:
        pvz_id, pvz_name, password, chat_id = pvz
        if chat_id:
            try:
                keyboard = [
                    [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", url=f"https://t.me/{context.bot.username}?start=form")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                message_text = (
                    "üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                    "–ü–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é."
                )

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_markup=reply_markup
                )
                logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ü–í–ó {pvz_name}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {pvz_name}: {e}")


async def send_day_form(chat_id: int, day_index: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è"""
    user = db.get_user(chat_id)
    if not user:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_keyboard(chat_id)
        )
        return

    next_saturday = get_next_saturday()
    week_dates = get_week_dates(next_saturday)
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    if day_index >= len(week_dates):
        # –í—Å–µ –¥–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        user_schedule = db.get_user_schedule(chat_id, week_dates)
        filled_days = sum(1 for date in week_dates if date in user_schedule)

        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {filled_days} –∏–∑ {len(week_dates)} –¥–Ω–µ–π!\n\n"
                 "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: /myschedule\n"
                 "–ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É: /form",
            reply_markup=get_main_keyboard(chat_id)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_info = db.get_user(chat_id)
        if user_info:
            # user_info —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [0]id, [1]user_id, [2]username, [3]first_name, [4]pvz_id, [5]full_name, [6]pvz_name
            full_name = user_info[5] if user_info[5] else (user_info[3] or user_info[2] or f"User_{chat_id}")
            pvz_name = user_info[6]  # pvz_name –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–Ω–¥–µ–∫—Å–µ 6

            admin_message = (
                f"üìã –ù–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n\n"
                f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {full_name}\n"
                f"üè™ –ü–í–ó: {pvz_name}\n"
                f"üìÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–Ω–µ–π: {filled_days}/{len(week_dates)}\n"
                f"üïí –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {format_barnaul_time()}"
            )

            try:
                await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {full_name}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        return

    date = week_dates[day_index]
    day_name = day_names[day_index]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
    saved_schedule = db.get_user_schedule(chat_id, [date])
    saved_time = saved_schedule.get(date, "")

    if day_index == 0:
        # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # user —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [0]id, [1]user_id, [2]username, [3]first_name, [4]pvz_id, [5]full_name, [6]pvz_name
        pvz_name = user[6]  # pvz_name –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–Ω–¥–µ–∫—Å–µ 6
        message_text = "üìã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é!\n\n"
        message_text += f"–ü–µ—Ä–∏–æ–¥: {week_dates[0]} - {week_dates[-1]}\n"
        message_text += f"–í–∞—à –ü–í–ó: {pvz_name}\n\n"
        message_text += "–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –¥–Ω—é:"
        await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=get_main_keyboard(chat_id)
        )

    time_indicator = f" ‚úÖ {saved_time}" if saved_time else ""

    keyboard = [
        [
            InlineKeyboardButton("9.00-15.00", callback_data=f"day_{day_index}_9-15"),
            InlineKeyboardButton("15.00-21.00", callback_data=f"day_{day_index}_15-21")
        ],
        [
            InlineKeyboardButton("–ö–∞–∫ –Ω—É–∂–Ω–æ –ü–í–ó", callback_data=f"day_{day_index}_asneeded"),
            InlineKeyboardButton("–í—ã—Ö–æ–¥–Ω–æ–π", callback_data=f"day_{day_index}_dayoff")
        ],
        [
            InlineKeyboardButton("–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", callback_data=f"day_{day_index}_exact")
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    day_message = f"{date} - {day_name}{time_indicator}"

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"{day_message}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=reply_markup
    )


async def show_start_time_selection(chat_id: int, day_index: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç"""
    next_saturday = get_next_saturday()
    week_dates = get_week_dates(next_saturday)
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    date = week_dates[day_index]
    day_name = day_names[day_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —á–∞—Å–∞–º–∏ –æ—Ç 9:00 –¥–æ 21:00 —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
    keyboard = []
    row = []

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç
    times = []
    for hour in range(9, 22):  # —Å 9 –¥–æ 21
        times.append(f"{hour}:00")
        if hour < 21:  # 21:30 –Ω–µ –Ω—É–∂–Ω–æ
            times.append(f"{hour}:30")

    for time_str in times:
        row.append(InlineKeyboardButton(time_str, callback_data=f"start_{day_index}_{time_str}"))
        if len(row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{day_index}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚è∞ {date} - {day_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:",
        reply_markup=reply_markup
    )


async def show_end_time_selection(chat_id: int, day_index: int, start_time: str, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç"""
    next_saturday = get_next_saturday()
    week_dates = get_week_dates(next_saturday)
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    date = week_dates[day_index]
    day_name = day_names[day_index]

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    start_hour, start_minute = map(int, start_time.split(':'))
    start_total_minutes = start_hour * 60 + start_minute

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –æ—Ç start_time+30min –¥–æ 21:00
    keyboard = []
    row = []

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç, –Ω–∞—á–∏–Ω–∞—è —Å start_time + 30min
    times = []
    current_minutes = start_total_minutes + 30  # –Ω–∞—á–∏–Ω–∞–µ–º —Å +30 –º–∏–Ω—É—Ç

    while current_minutes <= 21 * 60:  # –¥–æ 21:00 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
        hour = current_minutes // 60
        minute = current_minutes % 60
        time_str = f"{hour}:{minute:02d}"
        times.append(time_str)
        current_minutes += 30

    for time_str in times:
        row.append(InlineKeyboardButton(time_str, callback_data=f"end_{day_index}_{start_time}_{time_str}"))
        if len(row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{day_index}")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚è∞ {date} - {day_name}\n–ù–∞—á–∞–ª–æ: {start_time}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã:",
        reply_markup=reply_markup
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.get_user(user_id)

    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        welcome_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
            f"–í–∞—à –ü–í–ó: {existing_user[6]}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_keyboard(user_id)
        )

        # –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if context.args and context.args[0] == 'form':
            await send_form(update, context)

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
        user_states[user_id] = {'state': 'waiting_password'}
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤–∞—à–µ–≥–æ –ü–í–ó.\n"
            "–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_empty_keyboard()  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )


async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è"""
    user = update.effective_user
    user_id = user.id
    password = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or user_states[user_id].get('state') != 'waiting_password':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    pvz = db.get_pvz_by_password(password)
    if pvz:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
        user_states[user_id] = {
            'state': 'waiting_full_name',
            'pvz_id': pvz[0],
            'pvz_name': pvz[1]
        }

        await update.message.reply_text(
            "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ª–µ–± –°–∞–º–∞—Ä–∏–Ω",
            reply_markup=get_empty_keyboard()  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )

    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_empty_keyboard()  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )


async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or user_states[user_id].get('state') != 'waiting_full_name':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    full_name = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    if len(full_name.split()) < 2:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ª–µ–± –°–∞–º–∞—Ä–∏–Ω\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_empty_keyboard()  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pvz_id = user_states[user_id]['pvz_id']
    pvz_name = user_states[user_id]['pvz_name']

    db.add_user(user_id, user.username, user.first_name, pvz_id, full_name)
    user_states[user_id] = {'state': 'registered'}

    await update.message.reply_text(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
        f"üë§ –í–∞—à–µ –∏–º—è: {full_name}\n"
        f"üè™ –í–∞—à –ü–í–ó: {pvz_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard(user_id)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    admin_message = (
        f"üë§ –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n"
        f"–ò–º—è: {full_name}\n"
        f"–ü–í–ó: {pvz_name}\n"
        f"–í—Ä–µ–º—è: {format_barnaul_time()}"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)"""
    user_id = update.effective_user.id
    text = update.message.text

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id in user_states:
        state = user_states[user_id].get('state')
        if state == 'waiting_password':
            await handle_password(update, context)
            return
        elif state == 'waiting_full_name':
            await handle_full_name(update, context)
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    if text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        await send_form(update, context)
    elif text == "üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç":
        await manual_report(update, context)
    elif text == "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await manual_collect(update, context)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
            reply_markup=get_main_keyboard(user_id)
        )


async def send_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /form"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)

    if not user:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
    db.delete_user_schedule(user_id)

    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
    await send_day_form(user_id, 0, context)


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data.startswith("day_"):
        parts = data.split("_")
        day_index = int(parts[1])
        time_type = parts[2]

        user = db.get_user(user_id)
        if not user:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return

        next_saturday = get_next_saturday()
        week_dates = get_week_dates(next_saturday)
        day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        selected_date = week_dates[day_index]
        day_name = day_names[day_index]

        if time_type == "exact":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
            await query.edit_message_text(
                text=f"‚è∞ {selected_date} - {day_name}\n–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è"
            )
            await show_start_time_selection(user_id, day_index, context)

        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            time_mapping = {
                "9-15": "9.00-15.00",
                "15-21": "15.00-21.00",
                "asneeded": "–ö–∞–∫ –Ω—É–∂–Ω–æ –ü–í–ó",
                "dayoff": "–í—ã—Ö–æ–¥–Ω–æ–π"
            }

            selected_time = time_mapping[time_type]
            db.save_schedule(user_id, selected_date, selected_time)

            await query.edit_message_text(
                text=f"‚úÖ {selected_date} - {day_name}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {selected_time}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            await send_day_form(user_id, day_index + 1, context)

    elif data.startswith("start_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        parts = data.split("_")
        day_index = int(parts[1])
        start_time = parts[2]  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "9:30"

        await query.edit_message_text(
            text=f"‚è∞ –í—ã–±—Ä–∞–Ω–æ –Ω–∞—á–∞–ª–æ: {start_time}"
        )
        await show_end_time_selection(user_id, day_index, start_time, context)

    elif data.startswith("end_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        parts = data.split("_")
        day_index = int(parts[1])
        start_time = parts[2]  # —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "9:30"
        end_time = parts[3]  # —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "18:00"

        next_saturday = get_next_saturday()
        week_dates = get_week_dates(next_saturday)
        day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        selected_date = week_dates[day_index]
        day_name = day_names[day_index]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        time_slot = f"{start_time}-{end_time}"
        db.save_schedule(user_id, selected_date, time_slot)

        await query.edit_message_text(
            text=f"‚úÖ {selected_date} - {day_name}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {time_slot}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        await send_day_form(user_id, day_index + 1, context)

    elif data.startswith("cancel_"):
        # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        day_index = int(data.split("_")[1])
        await query.edit_message_text("‚ùå –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω")
        await send_day_form(user_id, day_index, context)


async def send_admin_report(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    next_saturday = get_next_saturday()
    week_dates = get_week_dates(next_saturday)
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    all_pvz = db.get_all_pvz()

    for pvz in all_pvz:
        pvz_id, pvz_name, password, chat_id = pvz

        report = f"üìä –û–¢–ß–ï–¢ –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ\n–ü–í–ó: {pvz_name}\n–ü–µ—Ä–∏–æ–¥: {week_dates[0]} - {week_dates[-1]}\n\n"

        schedule_data = db.get_pvz_schedule_report(pvz_id, week_dates)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        day_schedule = {}
        for row in schedule_data:
            # row —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [0]first_name, [1]username, [2]user_id, [3]date, [4]time_slot, [5]full_name
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            full_name = row[5] if row[5] else (row[0] or row[1] or f"User_{row[2]}")
            date = row[3]
            time_slot = row[4]

            if date not in day_schedule:
                day_schedule[date] = []
            day_schedule[date].append(f"{full_name} - {time_slot}")

        for i, date in enumerate(week_dates):
            report += f"üìÖ {date} - {day_names[i]}:\n"

            if date in day_schedule:
                for entry in day_schedule[date]:
                    report += f"  üë§ {entry}\n"
            else:
                report += "  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

            report += "\n"

        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=report)
            logging.info(f"–û—Ç—á–µ—Ç –¥–ª—è {pvz_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {pvz_name}: {e}")


async def my_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)

    if not user:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    next_saturday = get_next_saturday()
    week_dates = get_week_dates(next_saturday)
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

    schedule = db.get_user_schedule(user_id, week_dates)

    # user —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: [0]id, [1]user_id, [2]username, [3]first_name, [4]pvz_id, [5]full_name, [6]pvz_name
    pvz_name = user[6]
    text = f"üìã –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n–ü–í–ó: {pvz_name}\n\n"

    has_data = False
    for i, date in enumerate(week_dates):
        time_slot = schedule.get(date)
        if time_slot:
            has_data = True
            text += f"‚úÖ {date} - {day_names[i]}: {time_slot}\n"
        else:
            text += f"‚ùå {date} - {day_names[i]}: –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n"

    if has_data:
        text += "\n–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'"
    else:
        text += "\n–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'"

    await update.message.reply_text(
        text,
        reply_markup=get_main_keyboard(user_id)
    )


async def set_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)

    if not user:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != ADMIN_CHAT_ID:
        await update.message.reply_text(
            "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —á–∞—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            reply_markup=get_main_keyboard(user_id)
        )
        return

    pvz_id = user[4]
    chat_id = update.effective_chat.id

    db.set_pvz_chat_id(pvz_id, chat_id)

    await update.message.reply_text(
        f"‚úÖ –ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!\n"
        f"–ü–í–ó: {user[6]}\n"
        f"Chat ID: {chat_id}\n\n"
        f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç –∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 10:00 –ø–æ –ë–∞—Ä–Ω–∞—É–ª—É.",
        reply_markup=get_main_keyboard(user_id)
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üìã –ë–æ—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n"
        "‚Ä¢ üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É - —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç - –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "‚Ä¢ üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/myschedule - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/setchat - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(
        help_text,
        reply_markup=get_main_keyboard(update.effective_user.id)
    )


async def manual_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
        return

    await send_admin_report(context)
    await update.message.reply_text(
        "‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
        reply_markup=get_main_keyboard(update.effective_user.id)
    )


async def manual_collect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
        return

    await start_schedule_collection(context)
    await update.message.reply_text(
        "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
        reply_markup=get_main_keyboard(update.effective_user.id)
    )


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if str(update.effective_user.id) != ADMIN_CHAT_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
        return

    all_pvz = db.get_all_pvz()
    stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"

    for pvz in all_pvz:
        pvz_id, pvz_name, password, chat_id = pvz

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ü–í–ó
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users WHERE pvz_id = ?', (pvz_id,))
        user_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
        next_saturday = get_next_saturday()
        week_dates = get_week_dates(next_saturday)
        placeholders = ','.join('?' for _ in week_dates)
        cursor.execute(f'''
            SELECT COUNT(DISTINCT user_id) FROM schedule 
            WHERE date IN ({placeholders})
            AND user_id IN (SELECT user_id FROM users WHERE pvz_id = ?)
        ''', (*week_dates, pvz_id))
        filled_count = cursor.fetchone()[0]
        conn.close()

        stats_text += f"üè™ {pvz_name}:\n"
        stats_text += f"  üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {user_count}\n"
        stats_text += f"  üìù –ó–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É: {filled_count}\n"
        stats_text += f"  üí¨ –ß–∞—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {'‚úÖ' if chat_id else '‚ùå'}\n\n"

    await update.message.reply_text(
        stats_text,
        reply_markup=get_main_keyboard(update.effective_user.id)
    )


async def set_commands(application: Application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("form", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
        BotCommand("myschedule", "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        BotCommand("setchat", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∞–¥–º–∏–Ω)"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
    ]
    await application.bot.set_my_commands(commands)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫ –±–æ–ª–µ–µ –æ–±—â–∏–º)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("form", send_form))
    application.add_handler(CommandHandler("myschedule", my_schedule))
    application.add_handler(CommandHandler("setchat", set_chat))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("report", manual_report))
    application.add_handler(CommandHandler("collect", manual_collect))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CallbackQueryHandler(handle_button_click))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ë–∞—Ä–Ω–∞—É–ª–∞
    job_queue = application.job_queue

    if job_queue:
        # –ó–∞–¥–∞—á–∞ –Ω–∞ —Å—É–±–±–æ—Ç—É (–∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É –≤ 10:00 –ø–æ –ë–∞—Ä–Ω–∞—É–ª—É)
        # –£—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ Railway —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ UTC, –ø–æ—ç—Ç–æ–º—É –≤—ã—á–∏—Ç–∞–µ–º 7 —á–∞—Å–æ–≤
        job_queue.run_daily(
            start_schedule_collection,
            time=datetime.strptime("03:00", "%H:%M").time(),  # 10:00 –ë–∞—Ä–Ω–∞—É–ª - 7 —á–∞—Å–æ–≤ = 03:00 UTC
            days=(5,)
        )

        # –ó–∞–¥–∞—á–∞ –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 09:00 –ø–æ –ë–∞—Ä–Ω–∞—É–ª—É)
        job_queue.run_daily(
            send_admin_report,
            time=datetime.strptime("02:00", "%H:%M").time(),  # 09:00 –ë–∞—Ä–Ω–∞—É–ª - 7 —á–∞—Å–æ–≤ = 02:00 UTC
            days=(6,)
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    application.post_init = set_commands

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º –ë–∞—Ä–Ω–∞—É–ª (UTC+7)...")
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ë–∞—Ä–Ω–∞—É–ª (UTC+7)")
    application.run_polling()


if __name__ == "__main__":

    main()
